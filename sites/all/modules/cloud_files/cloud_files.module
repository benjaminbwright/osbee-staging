<?php

/**
 * Implements hook_menu().
 */
function cloud_files_menu() {

  $items['admin/config/media/cloud-files'] = array(
    'title' => 'Cloud Files',
    'description' => 'Cloud Files Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_files_admin'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Simple utility function for returning an array containing Rackspace Cloud
 * Files authentication URLs. The Rackspace Cloud Files PHP API binding is
 * loaded to use the US and UK URLs that are declared there.
 *
 * Add on to this to add new authentication URLs.
 *
 * @return  array
 */
function _cloud_files_auth_urls() {
  $info = libraries_load('rackspace');
  if ($info['loaded']) {
      return array(
        'us' => array(
          'name' => t('United States'),
          'url' => US_AUTHURL
        ),
        'gb' => array(
          'name' => t('United Kingdom'),
          'url' => UK_AUTHURL
        ),
      );
  }
  else {
    form_set_error('', t('The Rackspace Cloud Files API could not be loaded.'));
  }
}

/**
 * Implements hook_admin().
 */
function cloud_files_admin() {

  // radios group with an other option taken from http://drupal.org/node/772446

  $form['rackspace_cloud_auth_url'] = array(
    '#type' => 'item',
    '#title' => t('Authentication URL'),
    '#description' => t('Select "United States" if your account was created via rackspacecloud.com. Select "United Kingdom" if your account was created via rackspace.co.uk.'),
  );

  $cf_urls = _cloud_files_auth_urls();
  $other = variable_get('rackspace_cloud_auth_url') ? TRUE : FALSE;
  foreach ($cf_urls as $key => $item) {
    $form['rackspace_cloud_auth_url'][$key] = array(
      '#type' => 'radio',
      '#title' => $item['name'] . ' ( ' . $item['url'] . ' ) ',
      '#default_value' => variable_get('rackspace_cloud_auth_url'),
      '#return_value' => $item['url'],
      '#parents' => array('rackspace_cloud_auth_url'),
    );
    //if this is the first one
    if (count($form['rackspace_cloud_auth_url']) == 1) {
      // make the style match a normal radios group.
      $form['rackspace_cloud_auth_url'][$key]['#prefix'] = '<div class="form-radios">';
    }
    //if this is the value previously saved
    if ($item['url'] == variable_get('rackspace_cloud_auth_url')) {
        $other = FALSE;
    }
  }

  //if other is used, reset all the default_values
  if ($other) {
      foreach ($cf_urls as $key => $item) {
        $form['rackspace_cloud_auth_url'][$key]['#default_value'] = 'other';
      }
  }

  $form['rackspace_cloud_auth_url']['other'] = array(
    // The 'container-inline' class places elements next to each other, while the
    // 'form-item' class provides the correct spacing between options.
    '#prefix' => '<div class="container-inline form-item">',
    '#suffix' => '</div>'
  );

  // By supplying the title here, instead of using the '#field_prefix' property
  // of the textfield, clicking the text will also select the radio button.
  $form['rackspace_cloud_auth_url']['other']['other_option'] = array(
    '#type' => 'radio',
    '#title' => t('Other ('),
    '#return_value' => 'other',
    '#default_value' => $other ? 'other' : variable_get('rackspace_cloud_auth_url'),
    '#parents' => array('rackspace_cloud_auth_url')
  );

  $form['rackspace_cloud_auth_url']['other']['other_textfield'] = array(
    '#type' => 'textfield',
    '#default_value' => $other ? variable_get('rackspace_cloud_auth_url') : '',
    '#size' => 20,         // The default size is a bit large...
    '#suffix' => ')</div>'  // End of the "form-radios" style.
  );

  $rackspace_cloud_username = variable_get('rackspace_cloud_username');
  $rackspace_cloud_api_key = variable_get('rackspace_cloud_api_key');
  $rackspace_cloud_container = variable_get('rackspace_cloud_container');
  $rackspace_cloud_cdn_domain = variable_get('rackspace_cloud_cdn_domain');
  
  $form['rackspace_cloud_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t('Enter your Rackspace Cloud username.'),
    '#default_value' => $rackspace_cloud_username,
    '#required' => TRUE,
  );

  $form['rackspace_cloud_api_key'] = array(
    '#type' => 'password',
    '#title' => t('API Key'),
    '#description' => t('Enter your Rackspace Cloud API Key.'),
    '#default_value' => $rackspace_cloud_api_key,
  );

  $form['rackspace_cloud_container'] = array(
    '#type' => 'textfield',
    '#title' => t('Container'),
    '#description' => t('Enter your Rackspace Cloud Container name.'),
    '#default_value' => $rackspace_cloud_container,
    '#required' => TRUE,
  );
  // if there is a username/api_key available, try to get the containers list
  if ($rackspace_cloud_username && $rackspace_cloud_api_key) {
    try {
      $auth = _cloud_files_get_authentication();
      $conn = new CF_Connection($auth);
      $container_list = $conn->list_containers();
      $container_options = array();
      foreach ($container_list as $container) {
        $container_options[$container] = $container;
      }
      if ($container_list) {
        $form['rackspace_cloud_container']['#type'] = 'select';
        $form['rackspace_cloud_container']['#options'] = $container_options;
      }
    } catch (Exception $e) {
      drupal_set_message(t('Error getting container list.'), 'error');
    }
  }

  $form['rackspace_cloud_cdn_domain'] = array(
    '#type' => 'value',
    '#title' => t('Domain'),
    '#description' => t('The container domain. Enter a custom CNAME here. Leave this empty to get the default domain of the selected container.'),
    '#default_value' => $rackspace_cloud_cdn_domain,
  );
  //if there is a domain set, allow it to be updated
  //this is so it is first set to the container domain name
  //but can be updated to a custom CNAME
  if ($rackspace_cloud_cdn_domain) {
    $form['rackspace_cloud_cdn_domain']['#type'] = 'textfield';
    $form['rackspace_cloud_cdn_domain']['#required'] = TRUE;
  }

  $form['rackspace_cloud_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug'),
    '#description' => t('Check the box to enable logging.'),
    '#default_value' => variable_get('rackspace_cloud_debug'),
  );

  //$form['#submit'][] = 'cloud_files_settings_submit';

  return system_settings_form($form);
}

/**
 * Implements hook_field_validate().
 *
 * Validate Rackspace Cloud settings
 */
function cloud_files_admin_validate($form, &$form_state) {
  $info = libraries_load('rackspace');
  if ($info['loaded']) {
    $user = $form_state['values']['rackspace_cloud_username'];
    $apikey = $form_state['values']['rackspace_cloud_api_key'] ? $form_state['values']['rackspace_cloud_api_key'] : variable_get('rackspace_cloud_api_key');
    $container = $form_state['values']['rackspace_cloud_container'];
    $rackspace_cloud_cdn_domain = $form_state['values']['rackspace_cloud_cdn_domain'];

    //if using Other authentication URL, set its value from the text field
    if ($form_state['values']['rackspace_cloud_auth_url'] == 'other') {
        $form_state['values']['rackspace_cloud_auth_url'] = $form_state['values']['other_textfield'];
    }
    $auth_url = $form_state['values']['rackspace_cloud_auth_url'];

    //if API Key was left empty, use the previously saved API Key
    //with this, it wont be possible to clear the API Key, but it can be changed to something else
    //this is so the API key doesnt have to be entered every time
    //if you are changing another setting like container, or debug mode
    if (!$form_state['values']['rackspace_cloud_api_key']) {
      $form_state['values']['rackspace_cloud_api_key'] = $apikey;
    }

    try {
      $auth = new CF_Authentication($user, $apikey, NULL, $auth_url);
      # $auth->ssl_use_cabundle();  # bypass cURL's old CA bundle
      if ($auth->authenticate()) {
        //if authentication passed, save these variables now
        //so if container is incorrect, we can still fetch container list
        variable_set('rackspace_cloud_username',$user);
        variable_set('rackspace_cloud_api_key',$apikey);
        variable_set('rackspace_cloud_auth_url',$auth_url);
      }
    } catch (AuthenticationException $e) {
      form_set_error('rackspace_cloud_username][rackspace_cloud_api_key', t('Invalid Username or API Key.'));
    } catch (Exception $e) {
      form_set_error('rackspace_cloud_username][rackspace_cloud_api_key', t('Error authenticating. Please check the Username and/or API Key.'));
    }

    //if there is not a domain set, get the container domain
    if (!$rackspace_cloud_cdn_domain) {
      try {
        $conn = new CF_Connection($auth);
        $container = $conn->get_container($container);
        $form_state['values']['rackspace_cloud_cdn_domain'] = str_replace(array('http://', 'https://'), '', $container->cdn_uri);
      } catch (Exception $e) {
        form_set_error('rackspace_cloud_container', t('Container does not exist.'));
      }
    }
  }
  else {
    form_set_error('', t('The Rackspace Cloud Files API was not loaded.'));
  }
}

/*
function cloud_files_settings_submit($form, $form_state) {
  $user = $form_state['values']['rackspace_cloud_username'];
  $apikey = $form_state['values']['rackspace_cloud_api_key'];
  $container = $form_state['values']['rackspace_cloud_container'];
}
 */

/**
 * Implements hook_stream_wrappers().
 *
 * expose the stream wrappers to Drupal
 */
function cloud_files_stream_wrappers() {
  //Rackspace Cloud Files stream wrapper
  $wrappers = array(
    'rcf' => array(
      'name' => t('Rackspace Cloud Files'),
      'class' => 'RackspaceCloudFilesStreamWrapper',
      'description' => t('Rackspace Cloud Files.'),
    ),
  );
  return $wrappers;
}

/**
 * Implements hook_libraries_info().
 */
function cloud_files_libraries_info() {
  return array(
    'rackspace' => array(
      'title' => 'Rackspace Cloud Files PHP API',
      'vendor url' => 'https://github.com/rackspace/php-cloudfiles',
      'download url' => 'https://github.com/rackspace/php-cloudfiles',
      'path' => 'php-cloudfiles',
      'version arguments' => array(
        'file' => 'php-cloudfiles/Changelog',
        'pattern' => '/(\d+\.\d+(\.\d+)?)/',
      ),
      'files' => array(
        'php' => array(
          'cloudfiles.php',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_requirements().
 */
function cloud_files_requirements() {
  $t = get_t();
  $requirements = array();

  $info = libraries_load('rackspace');
  if (!$info['loaded']) {
    $requirements['cloud_files'] = array(
      'severity' => REQUIREMENT_ERROR,
      'title' => $t('Rackspace Cloud Files PHP API'),
      'value' => $t('Failed to load the Rackspace Cloud Files PHP API'),
      'description' => $t('Please make sure the Rackspace Cloud Files PHP API library is installed in the libraries directory (libraries\rackspace\php-cloudfiles).'),
    );
  }
  else {
    $requirements['cloud_files'] = array(
      'severity' => REQUIREMENT_INFO,
      'title' => $t('Cloud Files'),
      'value' => $info['version'],
    );
  }

  return $requirements;
}

function _cloud_files_get_authentication() {
  $credentials = cache_get("rackspace_cloud_credentials");
  
  if ($credentials) {      
    //check to make sure the credentials are less than 1 day old
    $created = new DateTime(date("r", $credentials->created));
    $now = new DateTime();
    $age = $now->diff($created);
    if ($age->d > 0) {
      if (variable_get('rackspace_cloud_debug')) {
        watchdog("cloud_files", "credentials are too old", NULL, WATCHDOG_DEBUG);
      }
      $credentials = NULL;
    }
  }
    
  if ($credentials) {
    if (variable_get('rackspace_cloud_debug')) {
      watchdog("cloud_files", "loading cached credentials", NULL, WATCHDOG_DEBUG);
    }
    
    $auth_token = $credentials->data['auth_token'];
    $storage_url = $credentials->data['storage_url'];
    $cdnm_url = $credentials->data['cdnm_url'];

    $auth = new CF_Authentication();
    $auth->load_cached_credentials($auth_token, $storage_url, $cdnm_url);
  }
  else {
    if (variable_get('rackspace_cloud_debug')) {
      watchdog("cloud_files", "requesting Rackspace authentication", NULL, WATCHDOG_DEBUG);
    }
    $auth = new CF_Authentication(variable_get('rackspace_cloud_username'),
                                  variable_get('rackspace_cloud_api_key'),
                                  NULL,
                                  variable_get('rackspace_cloud_auth_url'));
    $auth->authenticate();
    $credentials = $auth->export_credentials();
    
    cache_set("rackspace_cloud_credentials", $credentials, 'cache', CACHE_TEMPORARY);
  }
  return $auth;
}